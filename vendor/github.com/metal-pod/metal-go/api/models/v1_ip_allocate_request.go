// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1IPAllocateRequest v1 IP allocate request
// swagger:model v1.IPAllocateRequest
type V1IPAllocateRequest struct {

	// a description for this entity
	Description string `json:"description,omitempty"`

	// a readable name for this entity
	Name string `json:"name,omitempty"`

	// the network this ip allocate request address belongs to
	// Required: true
	Networkid *string `json:"networkid"`

	// the project this ip address belongs to
	// Required: true
	Projectid *string `json:"projectid"`
}

// Validate validates this v1 IP allocate request
func (m *V1IPAllocateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1IPAllocateRequest) validateNetworkid(formats strfmt.Registry) error {

	if err := validate.Required("networkid", "body", m.Networkid); err != nil {
		return err
	}

	return nil
}

func (m *V1IPAllocateRequest) validateProjectid(formats strfmt.Registry) error {

	if err := validate.Required("projectid", "body", m.Projectid); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1IPAllocateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1IPAllocateRequest) UnmarshalBinary(b []byte) error {
	var res V1IPAllocateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
