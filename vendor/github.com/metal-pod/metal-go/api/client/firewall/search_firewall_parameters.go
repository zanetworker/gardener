// Code generated by go-swagger; DO NOT EDIT.

package firewall

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchFirewallParams creates a new SearchFirewallParams object
// with the default values initialized.
func NewSearchFirewallParams() *SearchFirewallParams {
	var ()
	return &SearchFirewallParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchFirewallParamsWithTimeout creates a new SearchFirewallParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchFirewallParamsWithTimeout(timeout time.Duration) *SearchFirewallParams {
	var ()
	return &SearchFirewallParams{

		timeout: timeout,
	}
}

// NewSearchFirewallParamsWithContext creates a new SearchFirewallParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchFirewallParamsWithContext(ctx context.Context) *SearchFirewallParams {
	var ()
	return &SearchFirewallParams{

		Context: ctx,
	}
}

// NewSearchFirewallParamsWithHTTPClient creates a new SearchFirewallParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchFirewallParamsWithHTTPClient(client *http.Client) *SearchFirewallParams {
	var ()
	return &SearchFirewallParams{
		HTTPClient: client,
	}
}

/*SearchFirewallParams contains all the parameters to send to the API endpoint
for the search firewall operation typically these are written to a http.Request
*/
type SearchFirewallParams struct {

	/*Partition
	  the partition in which the firewall is located

	*/
	Partition *string
	/*Project
	  project that this firewall is allocated with

	*/
	Project *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search firewall params
func (o *SearchFirewallParams) WithTimeout(timeout time.Duration) *SearchFirewallParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search firewall params
func (o *SearchFirewallParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search firewall params
func (o *SearchFirewallParams) WithContext(ctx context.Context) *SearchFirewallParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search firewall params
func (o *SearchFirewallParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search firewall params
func (o *SearchFirewallParams) WithHTTPClient(client *http.Client) *SearchFirewallParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search firewall params
func (o *SearchFirewallParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPartition adds the partition to the search firewall params
func (o *SearchFirewallParams) WithPartition(partition *string) *SearchFirewallParams {
	o.SetPartition(partition)
	return o
}

// SetPartition adds the partition to the search firewall params
func (o *SearchFirewallParams) SetPartition(partition *string) {
	o.Partition = partition
}

// WithProject adds the project to the search firewall params
func (o *SearchFirewallParams) WithProject(project *string) *SearchFirewallParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the search firewall params
func (o *SearchFirewallParams) SetProject(project *string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *SearchFirewallParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Partition != nil {

		// query param partition
		var qrPartition string
		if o.Partition != nil {
			qrPartition = *o.Partition
		}
		qPartition := qrPartition
		if qPartition != "" {
			if err := r.SetQueryParam("partition", qPartition); err != nil {
				return err
			}
		}

	}

	if o.Project != nil {

		// query param project
		var qrProject string
		if o.Project != nil {
			qrProject = *o.Project
		}
		qProject := qrProject
		if qProject != "" {
			if err := r.SetQueryParam("project", qProject); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
